/*
 * Trabalhodesenvolvido para disciplina de ISS - 2016
 */
package visao;

import controller.EmprestimoController;
import controller.MaterialBibliograficoController;
import java.util.List;
import modelo.*;

/**
 *
 * @author Gabriel
 */
public class MaterialBibliograficoProcura extends javax.swing.JFrame {
    private int opcao;
    /**
     * Creates new form MaterialBibliograficoProcura
     * @param opcao
     */
    public MaterialBibliograficoProcura(int opcao) {
        this.opcao = opcao;
        initComponents();
    }
    
    public MaterialBibliograficoProcura() {
        initComponents();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jComboBox1 = new javax.swing.JComboBox<>();
        jLabelId = new javax.swing.JLabel();
        jLabelNome = new javax.swing.JLabel();
        jTextFieldID = new javax.swing.JTextField();
        jTextFieldNome = new javax.swing.JTextField();
        jButtonProcuraNome = new javax.swing.JButton();
        jButtonCancelar = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jButtonProcuraID = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Procurar");
        setMinimumSize(new java.awt.Dimension(430, 200));
        setPreferredSize(new java.awt.Dimension(330, 250));
        setResizable(false);

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Livro", "Artigo", "Periodico", "VÃ­deo" }));

        jLabelId.setText("ID:");

        jLabelNome.setText("Nome:");

        jButtonProcuraNome.setText("Procurar Nome");
        jButtonProcuraNome.setPreferredSize(new java.awt.Dimension(100, 40));
        jButtonProcuraNome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonProcuraNomeActionPerformed(evt);
            }
        });

        jButtonCancelar.setText("Cancelar");
        jButtonCancelar.setPreferredSize(new java.awt.Dimension(100, 40));
        jButtonCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelarActionPerformed(evt);
            }
        });

        jLabel3.setText("ou");

        jButtonProcuraID.setText("Procurar ID");
        jButtonProcuraID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonProcuraIDActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(173, 173, 173))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelNome)
                    .addComponent(jLabelId))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextFieldID, javax.swing.GroupLayout.DEFAULT_SIZE, 220, Short.MAX_VALUE)
                    .addComponent(jTextFieldNome))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButtonProcuraNome, javax.swing.GroupLayout.DEFAULT_SIZE, 103, Short.MAX_VALUE)
                    .addComponent(jButtonProcuraID, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(145, 145, 145)
                        .addComponent(jButtonCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(186, 186, 186)
                        .addComponent(jLabel3)))
                .addContainerGap(155, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelId)
                    .addComponent(jTextFieldID, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonProcuraID, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelNome)
                    .addComponent(jButtonProcuraNome, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jButtonCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(16, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelarActionPerformed
        dispose();
    }//GEN-LAST:event_jButtonCancelarActionPerformed

    private void jButtonProcuraNomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonProcuraNomeActionPerformed
        int valor = jComboBox1.getSelectedIndex();
        MaterialBibliograficoController controller = new MaterialBibliograficoController();
        EmprestimoController controllerEmprestimo = new EmprestimoController();
        
        if (jTextFieldNome.getText().equals("")) {
            CampoVazio campoVazio = new CampoVazio();
            campoVazio.setVisible(true);
        } else {
            switch (opcao) {
                case 1: //Editar
                    switch (valor) {
                        case 0:
                            Livro livro = new Livro();
                            List<Livro> listaLivro = controller.consultarMaterial(valor, jTextFieldNome.getText(), livro);
                            if (listaLivro.isEmpty()) {
                                NaoEncontrado naoEncontrado = new NaoEncontrado();
                                naoEncontrado.setVisible(true);
                            } else {
                                MaterialBibliograficoEditaLivro editaLivro = new MaterialBibliograficoEditaLivro();
                                editaLivro.setCampos(listaLivro.get(0));
                                editaLivro.setVisible(true);
                            }
                            break;

                        case 1:
                            Artigo artigo = new Artigo();
                            List<Artigo> listaArtigo = controller.consultarMaterial(valor, jTextFieldNome.getText(), artigo);
                            if (listaArtigo.isEmpty()) {
                                NaoEncontrado naoEncontrado = new NaoEncontrado();
                                naoEncontrado.setVisible(true);
                            } else {
                                if (listaArtigo.size() == 1) {
                                    MaterialBibliograficoEditaArtigo editaArtigo = new MaterialBibliograficoEditaArtigo();
                                    editaArtigo.setCampos(listaArtigo.get(0));
                                    editaArtigo.setVisible(true);
                                }
                            }
                            break;

                        case 2:
                            Periodico periodico = new Periodico();
                            List<Periodico> listaPeriodico = controller.consultarMaterial(valor, jTextFieldNome.getText(), periodico);

                            if (listaPeriodico.isEmpty()) {
                                NaoEncontrado naoEncontrado = new NaoEncontrado();
                                naoEncontrado.setVisible(true);
                            } else {
                                if (listaPeriodico.size() == 1) {
                                    MaterialBibliograficoEditaPeriodico editaPeriodico = new MaterialBibliograficoEditaPeriodico();
                                    editaPeriodico.setCampos(listaPeriodico.get(0));
                                    editaPeriodico.setVisible(true);
                                }
                            }
                            break;

                        case 3:
                            Video video = new Video();
                            List<Video> listaVideo = controller.consultarMaterial(valor, jTextFieldNome.getText(), video);

                            if (listaVideo.isEmpty()) {
                                NaoEncontrado naoEncontrado = new NaoEncontrado();
                                naoEncontrado.setVisible(true);
                            } else {
                                if (listaVideo.size() == 1) {
                                    MaterialBibliograficoEditaVideo editaVideo = new MaterialBibliograficoEditaVideo();
                                    editaVideo.setCampos(listaVideo.get(0));
                                    editaVideo.setVisible(true);
                                }
                            }
                            break;
                    }
                    break;
                
                case 2://Excluir
                    switch (valor) {
                        case 0:
                            Livro livro = new Livro();
                            List<Livro> listaLivro = controller.consultarMaterial(valor, jTextFieldNome.getText(), livro);
                            if (listaLivro.isEmpty()) {
                                NaoEncontrado naoEncontrado = new NaoEncontrado();
                                naoEncontrado.setVisible(true);
                            } else {
                                MaterialBibliograficoExcluirLivro excluirLivro = new MaterialBibliograficoExcluirLivro();
                                excluirLivro.setCampos(listaLivro.get(0));
                                excluirLivro.setVisible(true);
                            }
                            break;

                        case 1:
                            Artigo artigo = new Artigo();
                            List<Artigo> listaArtigo = controller.consultarMaterial(valor, jTextFieldNome.getText(), artigo);
                            if (listaArtigo.isEmpty()) {
                                NaoEncontrado naoEncontrado = new NaoEncontrado();
                                naoEncontrado.setVisible(true);
                            } else {
                                if (listaArtigo.size() == 1) {
                                    MaterialBibliograficoExcluirArtigo excluirArtigo = new MaterialBibliograficoExcluirArtigo();
                                    excluirArtigo.setCampos(listaArtigo.get(0));
                                    excluirArtigo.setVisible(true);
                                }
                            }
                            break;

                        case 2:
                            Periodico periodico = new Periodico();
                            List<Periodico> listaPeriodico = controller.consultarMaterial(valor, jTextFieldNome.getText(), periodico);

                            if (listaPeriodico.isEmpty()) {
                                NaoEncontrado naoEncontrado = new NaoEncontrado();
                                naoEncontrado.setVisible(true);
                            } else {
                                if (listaPeriodico.size() == 1) {
                                    MaterialBibliograficoExcluirPeriodico excluirPeriodico = new MaterialBibliograficoExcluirPeriodico();
                                    excluirPeriodico.setCampos(listaPeriodico.get(0));
                                    excluirPeriodico.setVisible(true);
                                }
                            }
                            break;

                        case 3:
                            Video video = new Video();
                            List<Video> listaVideo = controller.consultarMaterial(valor, jTextFieldNome.getText(), video);

                            if (listaVideo.isEmpty()) {
                                NaoEncontrado naoEncontrado = new NaoEncontrado();
                                naoEncontrado.setVisible(true);
                            } else {
                                if (listaVideo.size() == 1) {
                                    MaterialBibliograficoExcluirVideo excluirVideo = new MaterialBibliograficoExcluirVideo();
                                    excluirVideo.setCampos(listaVideo.get(0));
                                    excluirVideo.setVisible(true);
                                }
                            }
                            break;
                    }
                    break;
                    
                case 3: //Emprestimo
                    int quantidade;
                    switch (valor) {
                        case 0:
                            Livro livro = new Livro();
                            List<Livro> listaLivro = controller.consultarMaterial(valor, jTextFieldNome.getText(), livro);
                            if (listaLivro.isEmpty()) {
                                NaoEncontrado naoEncontrado = new NaoEncontrado();
                                naoEncontrado.setVisible(true);
                            } else {
                                quantidade = listaLivro.get(0).getQuantidadeInventario() - listaLivro.get(0).getQuantLocados();
                                if (quantidade <= 0) {
                                    dispose();
                                    ExemplaresLocados locado = new ExemplaresLocados();
                                    locado.setVisible(true);
                                } else {
                                    EmprestimoCadastro emprestimoCadastro = new EmprestimoCadastro(0);
                                    emprestimoCadastro.setCampos(listaLivro.get(0));
                                    emprestimoCadastro.setVisible(true);
                                    listaLivro.get(0).setQuantLocados(listaLivro.get(0).getQuantLocados() + 1);
                                    controller.editarLivro(listaLivro.get(0));
                                }
                            }
                            break;
                        case 1:
                            Artigo artigo = new Artigo();
                            List<Artigo> listaArtigo = controller.consultarMaterial(valor, jTextFieldNome.getText(), artigo);
                            if (listaArtigo.isEmpty()) {
                                NaoEncontrado naoEncontrado = new NaoEncontrado();
                                naoEncontrado.setVisible(true);
                            } else {
                                if (listaArtigo.get(0).possoSerLocado()) {
                                    EmprestimoCadastro emprestimoCadastro = new EmprestimoCadastro(0);
                                    emprestimoCadastro.setCampos(listaArtigo.get(0));
                                    emprestimoCadastro.setVisible(true);
                                    listaArtigo.get(0).setQuantLocados(listaArtigo.get(0).getQuantLocados() + 1);
                                    controller.editarArtigo(listaArtigo.get(0));
                                } else {
                                    dispose();
                                    ExemplaresLocados locado = new ExemplaresLocados();
                                    locado.setVisible(true);
                                }
                            }
                            break;
                        case 2:
                            Periodico periodico = new Periodico();
                            List<Periodico> listaPeriodico = controller.consultarMaterial(valor, jTextFieldNome.getText(), periodico);

                            if (listaPeriodico.isEmpty()) {
                                NaoEncontrado naoEncontrado = new NaoEncontrado();
                                naoEncontrado.setVisible(true);
                            } else {
                                if (listaPeriodico.get(0).possoSerLocado()) {
                                    EmprestimoCadastro emprestimoCadastro = new EmprestimoCadastro(0);
                                    emprestimoCadastro.setCampos(listaPeriodico.get(0));
                                    emprestimoCadastro.setVisible(true);
                                    listaPeriodico.get(0).setQuantLocados(listaPeriodico.get(0).getQuantLocados() + 1);
                                    controller.editarPeriodico(listaPeriodico.get(0));
                                } else {
                                    dispose();
                                    ExemplaresLocados locado = new ExemplaresLocados();
                                    locado.setVisible(true);
                                }
                            }
                            break;
                        case 3:
                            Video video = new Video();
                            List<Video> listaVideo = controller.consultarMaterial(valor, jTextFieldNome.getText(), video);

                            if (listaVideo.isEmpty()) {
                                NaoEncontrado naoEncontrado = new NaoEncontrado();
                                naoEncontrado.setVisible(true);
                            } else {
                                if (listaVideo.get(0).possoSerLocado()) {
                                    EmprestimoCadastro emprestimoCadastro = new EmprestimoCadastro(0);
                                    emprestimoCadastro.setCampos(listaVideo.get(0));
                                    emprestimoCadastro.setVisible(true);
                                    listaVideo.get(0).setQuantLocados(listaVideo.get(0).getQuantLocados() + 1);
                                    controller.editarVideo(listaVideo.get(0));
                                } else {
                                    dispose();
                                    ExemplaresLocados locado = new ExemplaresLocados();
                                    locado.setVisible(true);
                                }
                            }
                            break;    
                    }
                    break;
                
                /*
                case 4: //Devolucao
                    jComboBox1.setEnabled(false);
                    jTextFieldNome.setEnabled(false);
                    Emprestimo emprestimo = new Emprestimo();
                    List<Emprestimo> listaEmprestimo = controllerEmprestimo.consultarEmprestimo(Integer.parseInt(jTextFieldID.getText()), emprestimo);
                    if (listaEmprestimo.isEmpty()) {
                        NaoEncontrado naoEncontrado = new NaoEncontrado();
                        naoEncontrado.setVisible(true);
                    } else {
                        switch (listaEmprestimo.get(0).getTipoMaterial()) {
                            case 0:
                                List<Livro> resultadoLivro = procurarPeloId(0, listaEmprestimo.get(0).getIdMaterial());
                                if (resultadoLivro.isEmpty()) {
                                    NaoEncontrado naoEncontrado = new NaoEncontrado();
                                    naoEncontrado.setVisible(true);
                                } else {
                                    resultadoLivro.get(0).setQuantLocados(resultadoLivro.get(0).getQuantLocados() - 1);
                                    controller.editarLivro(resultadoLivro.get(0));
                                }
                                break;
                                
                            case 1:
                                List<Artigo> resultadoArtigo = procurarPeloId(1, listaEmprestimo.get(0).getIdMaterial());
                                if (resultadoArtigo.isEmpty()) {
                                    NaoEncontrado naoEncontrado = new NaoEncontrado();
                                    naoEncontrado.setVisible(true);
                                } else {
                                    resultadoArtigo.get(0).setQuantLocados(resultadoArtigo.get(0).getQuantLocados() - 1);
                                    controller.editarArtigo(resultadoArtigo.get(0));
                                }
                                break;
                                
                            case 2:
                                List<Periodico> resultadoPeriodico = procurarPeloId(2, listaEmprestimo.get(0).getIdMaterial());
                                if (resultadoPeriodico.isEmpty()) {
                                    NaoEncontrado naoEncontrado = new NaoEncontrado();
                                    naoEncontrado.setVisible(true);
                                } else {
                                    resultadoPeriodico.get(0).setQuantLocados(resultadoPeriodico.get(0).getQuantLocados() - 1);
                                    controller.editarPeriodico(resultadoPeriodico.get(0));
                                }
                                break;
                                
                            case 3:
                                List<Video> resultadoVideo = procurarPeloId(0, listaEmprestimo.get(0).getIdMaterial());
                                if (resultadoVideo.isEmpty()) {
                                    NaoEncontrado naoEncontrado = new NaoEncontrado();
                                    naoEncontrado.setVisible(true);
                                } else {
                                    resultadoVideo.get(0).setQuantLocados(resultadoVideo.get(0).getQuantLocados() - 1);
                                    controller.editarVideo(resultadoVideo.get(0));
                                }
                                break;
                        }
                        controllerEmprestimo.enviarDevolucao(listaEmprestimo.get(0));
                        dispose();
                        ConfirmaOperacao confirma = new ConfirmaOperacao();
                        confirma.setVisible(true);
                    }
                    break;
                */
            }             
        } 
    }//GEN-LAST:event_jButtonProcuraNomeActionPerformed

    private void jButtonProcuraIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonProcuraIDActionPerformed
        int valor = jComboBox1.getSelectedIndex();
        MaterialBibliograficoController controller = new MaterialBibliograficoController();
        EmprestimoController controllerEmprestimo = new EmprestimoController();
        
        if (jTextFieldID.getText().equals("")) {
            CampoVazio campoVazio = new CampoVazio();
            campoVazio.setVisible(true);
        } else {
            switch (opcao) {
                case 1: //Editar
                    switch (valor) {
                        case 0:
                            Livro livro = new Livro();
                            List<Livro> listaLivro = controller.consultarMaterialID(valor, Integer.parseInt(jTextFieldID.getText()), livro);
                            if (listaLivro.isEmpty()) {
                                NaoEncontrado naoEncontrado = new NaoEncontrado();
                                naoEncontrado.setVisible(true);
                            } else {
                                MaterialBibliograficoEditaLivro editaLivro = new MaterialBibliograficoEditaLivro();
                                editaLivro.setCampos(listaLivro.get(0));
                                editaLivro.setVisible(true);
                            }
                            break;

                        case 1:
                            Artigo artigo = new Artigo();
                            List<Artigo> listaArtigo = controller.consultarMaterialID(valor, Integer.parseInt(jTextFieldID.getText()), artigo);
                            if (listaArtigo.isEmpty()) {
                                NaoEncontrado naoEncontrado = new NaoEncontrado();
                                naoEncontrado.setVisible(true);
                            } else {
                                if (listaArtigo.size() == 1) {
                                    MaterialBibliograficoEditaArtigo editaArtigo = new MaterialBibliograficoEditaArtigo();
                                    editaArtigo.setCampos(listaArtigo.get(0));
                                    editaArtigo.setVisible(true);
                                }
                            }
                            break;

                        case 2:
                            Periodico periodico = new Periodico();
                            List<Periodico> listaPeriodico = controller.consultarMaterialID(valor, Integer.parseInt(jTextFieldID.getText()), periodico);

                            if (listaPeriodico.isEmpty()) {
                                NaoEncontrado naoEncontrado = new NaoEncontrado();
                                naoEncontrado.setVisible(true);
                            } else {
                                if (listaPeriodico.size() == 1) {
                                    MaterialBibliograficoEditaPeriodico editaPeriodico = new MaterialBibliograficoEditaPeriodico();
                                    editaPeriodico.setCampos(listaPeriodico.get(0));
                                    editaPeriodico.setVisible(true);
                                }
                            }
                            break;

                        case 3:
                            Video video = new Video();
                            List<Video> listaVideo = controller.consultarMaterialID(valor, Integer.parseInt(jTextFieldID.getText()), video);

                            if (listaVideo.isEmpty()) {
                                NaoEncontrado naoEncontrado = new NaoEncontrado();
                                naoEncontrado.setVisible(true);
                            } else {
                                if (listaVideo.size() == 1) {
                                    MaterialBibliograficoEditaVideo editaVideo = new MaterialBibliograficoEditaVideo();
                                    editaVideo.setCampos(listaVideo.get(0));
                                    editaVideo.setVisible(true);
                                }
                            }
                            break;
                    }
                    break;

                case 2://Excluir
                    switch (valor) {
                        case 0:
                            Livro livro = new Livro();
                            List<Livro> listaLivro = controller.consultarMaterialID(valor, Integer.parseInt(jTextFieldID.getText()), livro);
                            if (listaLivro.isEmpty()) {
                                NaoEncontrado naoEncontrado = new NaoEncontrado();
                                naoEncontrado.setVisible(true);
                            } else {
                                MaterialBibliograficoExcluirLivro excluirLivro = new MaterialBibliograficoExcluirLivro();
                                excluirLivro.setCampos(listaLivro.get(0));
                                excluirLivro.setVisible(true);
                            }
                            break;

                        case 1:
                            Artigo artigo = new Artigo();
                            List<Artigo> listaArtigo = controller.consultarMaterialID(valor, Integer.parseInt(jTextFieldID.getText()), artigo);
                            if (listaArtigo.isEmpty()) {
                                NaoEncontrado naoEncontrado = new NaoEncontrado();
                                naoEncontrado.setVisible(true);
                            } else {
                                if (listaArtigo.size() == 1) {
                                    MaterialBibliograficoExcluirArtigo excluirArtigo = new MaterialBibliograficoExcluirArtigo();
                                    excluirArtigo.setCampos(listaArtigo.get(0));
                                    excluirArtigo.setVisible(true);
                                }
                            }
                            break;

                        case 2:
                            Periodico periodico = new Periodico();
                            List<Periodico> listaPeriodico = controller.consultarMaterialID(valor, Integer.parseInt(jTextFieldID.getText()), periodico);

                            if (listaPeriodico.isEmpty()) {
                                NaoEncontrado naoEncontrado = new NaoEncontrado();
                                naoEncontrado.setVisible(true);
                            } else {
                                if (listaPeriodico.size() == 1) {
                                    MaterialBibliograficoExcluirPeriodico excluirPeriodico = new MaterialBibliograficoExcluirPeriodico();
                                    excluirPeriodico.setCampos(listaPeriodico.get(0));
                                    excluirPeriodico.setVisible(true);
                                }
                            }
                            break;

                        case 3:
                            Video video = new Video();
                            List<Video> listaVideo = controller.consultarMaterialID(valor, Integer.parseInt(jTextFieldID.getText()), video);

                            if (listaVideo.isEmpty()) {
                                NaoEncontrado naoEncontrado = new NaoEncontrado();
                                naoEncontrado.setVisible(true);
                            } else {
                                if (listaVideo.size() == 1) {
                                    MaterialBibliograficoExcluirVideo excluirVideo = new MaterialBibliograficoExcluirVideo();
                                    excluirVideo.setCampos(listaVideo.get(0));
                                    excluirVideo.setVisible(true);
                                }
                            }
                            break;
                    }
                    break;

                case 3: //Emprestimo
                    int quantidade;
                    switch (valor) {
                        case 0:
                            Livro livro = new Livro();
                            List<Livro> listaLivro = controller.consultarMaterialID(valor, Integer.parseInt(jTextFieldID.getText()), livro);
                            if (listaLivro.isEmpty()) {
                                NaoEncontrado naoEncontrado = new NaoEncontrado();
                                naoEncontrado.setVisible(true);
                            } else {
                                quantidade = listaLivro.get(0).getQuantidadeInventario() - listaLivro.get(0).getQuantLocados();
                                if (quantidade <= 0) {
                                    dispose();
                                    ExemplaresLocados locado = new ExemplaresLocados();
                                    locado.setVisible(true);
                                } else {
                                    EmprestimoCadastro emprestimoCadastro = new EmprestimoCadastro(0);
                                    emprestimoCadastro.setCampos(listaLivro.get(0));
                                    emprestimoCadastro.setVisible(true);
                                    listaLivro.get(0).setQuantLocados(listaLivro.get(0).getQuantLocados() + 1);
                                    controller.editarLivro(listaLivro.get(0));
                                }
                            }
                            break;
                        case 1:
                            Artigo artigo = new Artigo();
                            List<Artigo> listaArtigo = controller.consultarMaterialID(valor, Integer.parseInt(jTextFieldID.getText()), artigo);
                            if (listaArtigo.isEmpty()) {
                                NaoEncontrado naoEncontrado = new NaoEncontrado();
                                naoEncontrado.setVisible(true);
                            } else {
                                if (listaArtigo.get(0).possoSerLocado()) {
                                    EmprestimoCadastro emprestimoCadastro = new EmprestimoCadastro(0);
                                    emprestimoCadastro.setCampos(listaArtigo.get(0));
                                    emprestimoCadastro.setVisible(true);
                                    listaArtigo.get(0).setQuantLocados(listaArtigo.get(0).getQuantLocados() + 1);
                                    controller.editarArtigo(listaArtigo.get(0));
                                } else {
                                    dispose();
                                    ExemplaresLocados locado = new ExemplaresLocados();
                                    locado.setVisible(true);
                                }
                            }
                            break;
                        case 2:
                            Periodico periodico = new Periodico();
                            List<Periodico> listaPeriodico = controller.consultarMaterialID(valor, Integer.parseInt(jTextFieldID.getText()), periodico);

                            if (listaPeriodico.isEmpty()) {
                                NaoEncontrado naoEncontrado = new NaoEncontrado();
                                naoEncontrado.setVisible(true);
                            } else {
                                if (listaPeriodico.get(0).possoSerLocado()) {
                                    EmprestimoCadastro emprestimoCadastro = new EmprestimoCadastro(0);
                                    emprestimoCadastro.setCampos(listaPeriodico.get(0));
                                    emprestimoCadastro.setVisible(true);
                                    listaPeriodico.get(0).setQuantLocados(listaPeriodico.get(0).getQuantLocados() + 1);
                                    controller.editarPeriodico(listaPeriodico.get(0));
                                } else {
                                    dispose();
                                    ExemplaresLocados locado = new ExemplaresLocados();
                                    locado.setVisible(true);
                                }
                            }
                            break;
                        case 3:
                            Video video = new Video();
                            List<Video> listaVideo = controller.consultarMaterialID(valor, Integer.parseInt(jTextFieldID.getText()), video);

                            if (listaVideo.isEmpty()) {
                                NaoEncontrado naoEncontrado = new NaoEncontrado();
                                naoEncontrado.setVisible(true);
                            } else {
                                if (listaVideo.get(0).possoSerLocado()) {
                                    EmprestimoCadastro emprestimoCadastro = new EmprestimoCadastro(0);
                                    emprestimoCadastro.setCampos(listaVideo.get(0));
                                    emprestimoCadastro.setVisible(true);
                                    listaVideo.get(0).setQuantLocados(listaVideo.get(0).getQuantLocados() + 1);
                                    controller.editarVideo(listaVideo.get(0));
                                } else {
                                    dispose();
                                    ExemplaresLocados locado = new ExemplaresLocados();
                                    locado.setVisible(true);
                                }
                            }
                            break;
                    }
                    break;
            }
        }
    }//GEN-LAST:event_jButtonProcuraIDActionPerformed

    public List procurarPeloId(int tipoMaterial, int IdMaterial) {
        MaterialBibliograficoController controller = new MaterialBibliograficoController();
        
        switch (tipoMaterial) {
            case 0:
                Livro livro = new Livro();
                livro.setId(IdMaterial);
                return controller.consultarMaterial(livro, IdMaterial);
                
            case 1:
                Artigo artigo = new Artigo();
                artigo.setId(IdMaterial);
                return controller.consultarMaterial(artigo, IdMaterial);
                
            case 2:
                Periodico periodico = new Periodico();
                periodico.setId(IdMaterial);
                return controller.consultarMaterial(periodico, IdMaterial);
                
            case 3:
                Video video = new Video();
                video.setId(IdMaterial);
                return controller.consultarMaterial(video, IdMaterial);
        }
        return null;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MaterialBibliograficoProcura.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MaterialBibliograficoProcura.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MaterialBibliograficoProcura.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MaterialBibliograficoProcura.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MaterialBibliograficoProcura().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonCancelar;
    private javax.swing.JButton jButtonProcuraID;
    private javax.swing.JButton jButtonProcuraNome;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabelId;
    private javax.swing.JLabel jLabelNome;
    private javax.swing.JTextField jTextFieldID;
    private javax.swing.JTextField jTextFieldNome;
    // End of variables declaration//GEN-END:variables

    private List procuraID(Livro livro) {
        MaterialBibliograficoController controller = new MaterialBibliograficoController();
        return controller.consultarMaterial(livro, livro.getId());
    }
}
